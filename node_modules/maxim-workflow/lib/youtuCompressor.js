/**
 * Created by owenhong on 2015/12/18.
 */

var fs = require("fs");
var path = require('path');
var Browser = require('./youtuBrowser.js');
var Common = require('./common.js');



function ImgCompressor() {
    var compressHOST = "10.6.223.145";

    var self = this;
    /**
     * @class compress
     * @function 压缩图片
     * @param [name] {string} 必填 本地图片绝对地址
     * @param [newName] {string} 非必填 压缩后的存储的图片绝对地址，不传则默认为用原名覆盖原地址文件
     * @param [callback] {function} 必填 压缩完成后的回调
     */
    function compress(name, newName,globalConfig, callback) {

        //判断文件是否存在，不存在创建文件夹
        var f_name = path.basename(newName);
        var destFile = newName.replace(f_name,'');
        Common.createPath(destFile,fs);



        if (typeof newName == 'function') {
            callback = newName;
            newName = name;
        }

        fs.readFile(name, function(error, fileData) {
            if (error) {
                return callback({
                    code: -1,
                    msg: "压缩图片时，读取本地文件出错",
                    error: error
                })
            }
            var COMPRESS_CGI = 'http://' + compressHOST + '/dms/cgi-bin/compressPic';
            var postParam = {
                image: {
                    file: name.replace(/([^\/]*\/)*/, ''),
                    data: fileData
                },
                quality:globalConfig.youtuQuality
            };

            var browser = new Browser();
            browser.POSTFILE(COMPRESS_CGI, postParam, function(res, data) {
                var contentTypeHeader = res.headers['content-type'];
                if (contentTypeHeader && contentTypeHeader.indexOf('image/') === 0) {


                    fs.writeFile(newName, data, function(error) {
                        if (error) {
                            return callback({
                                code: -3,
                                msg: "保存压缩图片时出错"
                            })
                        }
                        callback({
                            code: 0,
                            msg: "图片压缩成功"
                        });
                    });


                } else {
                    try {
                        data = JSON.parse(data.toString());
                    } catch (e) {
                        data = {
                            code: -10,
                            msg: '图片压缩失败'
                        };
                    }
                    callback(data);
                }
            });
        });
    }
    self.compress = compress;
}


var youtuCompressor = new ImgCompressor();

function youtu(){};
youtu.prototype.compressor = function(imgs,config,globalConfig,callback){

    //处理config中路径的配置如果不以\结尾，则要加上
    config.localPath = config.localPath[config.localPath.length-1] === '\\' ? config.localPath : config.localPath + '\\';
    config.destPath = config.destPath[config.destPath.length-1] === '\\' ? config.destPath : config.destPath + '\\';

    var imgsLength = imgs.length;
    var index = imgsLength;
    var results = [];

    imgs.forEach(function(picture){
        //将源文件的根目录替换为目标目录的根目录
        var dest = picture.replace(config.localPath,config.destPath);

        youtuCompressor.compress(picture,dest,globalConfig,function(result){
            console.log(result);

            if(result.code !==0){
                results.push({
                    fName: picture.replace(config.localPath, '').replace(/\\/g, '\/'),
                    status: false,
                    message: result.msg
                });

                index--;
                if (index <= 0) {
                    callback(results);
                }
            }else{
                results.push({
                    fName: picture.replace(config.localPath, '').replace(/\\/g, '\/'),
                    status: true,
                    message: result.msg
                });

                index--;
                if (index <= 0) {
                    callback(results);
                }
            }
        });
    });
}

module.exports = youtu;