function FTBrowser() {

	var self = this;

	var _defaultHeaders = {
		'accept': '*/*',
		'accept-encoding': 'gzip',
		'accept-language': 'zh-cn,zh;q=0.8',
		'accept-charset': 'utf-8',
		'cache-control': 'no-cache',
		'connection': 'keep-alive',
		'pragma': 'no-cache',
		'cookie': '',
		'user-agent': 'Mozilla/5.0'
	};

	function Cookie() {

		var self = this;

		function isSubDomain(subDomain, parentDomain) {
			var sub = subDomain.toLowerCase().split('.');
			var parent = parentDomain.toLowerCase().split('.');
			if (sub.length < parent.length) {
				return false;
			}
			for (var i = 0, si = sub.length - parent.length; i < parent.length; ++i, si++) {
				if (parent[i] !== sub[si]) {
					return false;
				}
			}
			return true;
		}

		function isSubPath(subPath, parentPath) {
			if (parentPath === subPath) {
				return true;
			}
			if (subPath.indexOf(parentPath) != 0) {
				return false;
			}
			if (parentPath.substr(-1) == '/') {
				return true;
			}
			if (subPath.substr(parentPath.length) == '/') {
				return true;
			}
			return false;
		}

		function parse(fmtString, domain, path) {
			var data = {
				name: '',
				value: '',
				domain: domain,
				path: path
			};
			var fmtData = fmtString.split(/;\s{0,1}/).map(function(data) {
				return data.replace('=', '\0').split('\0').map(function(data) {
					return unescape(data);
				});
			});
			fmtData.forEach(function(item, index) {
				if (index === 0) {
					data.name = item[0];
					data.value = item[1];
				} else {
					if ((/MAX-AGE/i).test(item[0])) {
						data.expires = new Date().getTime() + Number(item[1]) * 1000;
					} else if ((/EXPIRES/i).test(item[0])) {
						if (!data.expires) {
							data.expires = new Date(item[1]).getTime();
						}
					} else if ((/PATH/i).test(item[0])) {
						if (isSubPath(path, item[1])) {
							data.path = item[1];
						}
					} else if ((/DOMAIN/i).test(item[0])) {
						item[1] = item[1].replace(/^\./, '');
						if (isSubDomain(domain, item[1])) {
							data.domain = item[1];
						}
					}
				}
			});

			return data;
		}

		function stringify(data) {
			return data.map(function(item) {
				return [escape(item.name), escape(item.value)].join('=');
			}).join('; ');
		}

		var _data = [];

		self.set = function(fmtData, srcDomain, srcPath) {
			if (fmtData.constructor.toString() === Array.toString()) {
				fmtData.forEach(function(fmtData) {
					self.set(fmtData, srcDomain, srcPath);
				});
				return self;
			}
			var data = fmtData;
			if (typeof(fmtData) === 'string') {
				data = parse(fmtData, srcDomain, srcPath);
			}

			if (!data.name) {
				return self;
			}
			if (!data.domain) {
				data.domain = srcDomain;
			}
			if (!data.path) {
				data.path = srcPath;
			}

			_data = _data.filter(function(item) {
				return !(item.name === data.name && item.domain === data.domain && item.path === data.path);
			});

			if (!(data.expires && data.expires < new Date().getTime() || data.value === 'deleted')) {

				_data.push(data);
			}

			return self;
		};
		self.render = function(srcDomain, srcPath) {
			var time = new Date().getTime();
			_data = _data.filter(function(item) {
				return (!item.expires || item.expires >= time);
			});
			return _data.filter(function(item) {
				return isSubDomain(srcDomain, item.domain) && isSubPath(srcPath, item.path);
			}).map(function(item) {
				return JSON.parse(JSON.stringify(item));
			});
		};
		self.renderString = function(srcDomain, srcPath) {
			return stringify(self.render(srcDomain, srcPath));
		};
		self.get = function(name, srcDomain, srcPath) {
			if (!name) {
				return JSON.parse(JSON.stringify(_data));
			}
			var items = self.render(srcDomain, srcPath).filter(function(item) {
				return item.name == name;
			});
			if (items.length) {
				return items[0].value || '';
			}
			return '';
		};
		self.remove = function(name, srcDomain, srcPath) {
			self.set({
				name: name,
				domain: srcDomain,
				path: srcPath,
				expires: 0
			});
		};

		Cookie.stringify = stringify;
	}

	var _cookies = new Cookie();

	function SessionStorage() {
		var self = this;
		var _data = [];
		self.getItem = function(name) {
			return (_data.filter(function(item) {
				return item.name == name;
			})[0] || {
				value: ''
			}).value;
		};
		self.setItem = function(name, value) {
			var item = _data.filter(function(item) {
				return item.name == name;
			});
			if (item.length) {
				item[0].value = String(value);
			} else {
				_data.push({
					name: String(name),
					value: String(value)
				});
			}
		};
	}

	var _sessionStorage = new SessionStorage();

	var http = require('http');
	var https = require('https');

	function HTTP(options) {
		return options.protocol == 'https:' ? https : http;
	}

	function _callback(callback, srcDomain, srcPath) {
		callback = callback || (function() {});
		return function(res) {
			function unzipData(res, buff, callback) {
				if (res.headers['content-encoding'] == 'gzip') {
					require('zlib').gunzip(data, function(error, gunzipData) {
						callback(res, gunzipData);
					});
				} else {
					callback(res, buff);
				}
			}

			function ungbkData(res, buff, callback) {
				if ((res.headers['content-type'] || '').match(/charset=gb/i)) {
					buff = require('iconv').decode(buff, 'gbk');
				}
				if (!res.headers['content-type'] || res.headers['content-type'].match(/text/i)) {
					return callback(res, buff.toString());
				}
				return callback(res, buff);
			}

			function updateCookie(res) {
				if (res.headers['set-cookie']) {
					res.headers['set-cookie'].forEach(function(fmtData) {
						_cookies.set(fmtData, srcDomain, srcPath);
					});
				}
			}

			if (res) {
				updateCookie(res);
				var data = new Buffer(0);
				res.on('data', function(chunk) {
					data = Buffer.concat([data, chunk]);
				}).on('end', function() {
					unzipData(res, data, function(res, data) {
						ungbkData(res, data, callback);
					});
				});
			}
		}
	}


	function GET(options, data, callback) {
		if (typeof(options) == 'string') {
			options = require('url').parse(options);
		}
		var headers = options.headers || {};
		for (var name in _defaultHeaders) {
			(name in headers) || (headers[name] = _defaultHeaders[name]);
		}
		headers.cookie = Cookie.stringify(_cookies.render(options.hostname, options.path));
		var strData = data;
		if (typeof(strData) == 'object') {
			strData = require('querystring').stringify(strData);
		} else {
			strData = strData.toString();
		}
		options.headers = headers;
		options.method = 'GET';
		options.path = options.path + (strData ? (options.path.indexOf('?') < 0 ? '?' : '&') + strData : '');

		var req = HTTP(options).get(options, _callback(callback, options.hostname, options.path));

		return req;
	}

	function POST(options, data, callback) {
		if (typeof(options) == 'string') {
			options = require('url').parse(options);
		}
		var headers = options.headers || {};
		for (var name in _defaultHeaders) {
			(name in headers) || (headers[name] = _defaultHeaders[name]);
		}
		headers.cookie = Cookie.stringify(_cookies.render(options.hostname, options.path));
		var strData = data;
		if (typeof(strData) == 'object') {
			strData = require('querystring').stringify(strData);
		} else {
			strData = strData.toString();
		}
		headers["content-length"] = strData.length;
		headers["content-type"] = "application/x-www-form-urlencoded";
		options.headers = headers;
		options.method = 'POST';

		var req = HTTP(options).request(options, _callback(callback, options.hostname, options.path));
		req.end(strData);

		return req;
	}

	function POSTFILE(options, data, callback) {
		function getBoundary() {
			function TMR() {
				return new Date().getTime().toString(36);
			}

			function RDM() {
				return Number(Math.random().toString().replace('0.', '')).toString(36);
			}
			return ['----', TMR(), RDM(), RDM(), RDM(), RDM()].join('').substr(0, 38);
		}
		var _boundary = getBoundary();
		var _boundaryBuffer = new Buffer('--' + _boundary);
		var _data = new Buffer(_boundaryBuffer);

		function setData(name, value) {
			_data = Buffer.concat([_data, new Buffer('\r\n'), new Buffer('Content-Disposition: form-data; name="' + name + '"\r\n\r\n' + value + '\r\n'), _boundaryBuffer]);
		}

		function setFile(name, value, filename) {
			_data = Buffer.concat([_data, new Buffer('\r\n'), new Buffer('Content-Disposition: form-data; name="' + name + '"; filename="' + filename + '"\r\nContent-Type: application/octet-stream\r\n\r\n'), Buffer.isBuffer(value) ? value : new Buffer(value), new Buffer('\r\n'), _boundaryBuffer]);
		}

		if (typeof(options) == 'string') {
			options = require('url').parse(options);
		}
		var headers = options.headers || {};
		for (var name in _defaultHeaders) {
			(name in headers) || (headers[name] = _defaultHeaders[name]);
		}
		headers.cookie = Cookie.stringify(_cookies.render(options.hostname, options.path));
		for (var name in data) {
			if (typeof(data[name]) != 'undefined' && data[name].file) {
				setFile(name, data[name].data, data[name].file);
			} else {
				setData(name, data[name]);
			}
		}

		_data = Buffer.concat([_data, new Buffer('--')]);

		options.headers = headers;
		options.headers['content-length'] = _data.length;
		options.headers['content-type'] = 'multipart/form-data; boundary=' + _boundary;
		options.headers['Content-Length'] = options.headers['content-length'];
		options.headers['Content-Type'] = options.headers['content-type'];
		options.method = 'POST';

		var req = HTTP(options).request(options, _callback(callback, options.hostname, options.path));
		req.end(_data);

		return req;
	}


	self.cookie = _cookies;
	self.sessionStorage = _sessionStorage;
	self.POST = POST;
	self.GET = GET;
	self.POSTFILE = POSTFILE;
}

FTBrowser.Wrapper = function(oncall) {
	var _browser = new FTBrowser();
	for (var name in _browser) {
		if (_browser[name].constructor == Function) {
			this[name] = (function(name) {
				return function() {
					oncall(name, arguments);
					return _browser[name].apply(_browser, arguments);
				};
			})(name);
		} else {
			this[name] = _browser[name];
		}
	}
}

module.exports = FTBrowser;