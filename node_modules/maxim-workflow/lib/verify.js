var csslint = require('csslint').CSSLint;
var fs = require('fs');
var common = require('./common.js');

var postcss = require('postcss');

var reporter    = require('postcss-reporter');
var stylelint = require('stylelint');



var stylelintConfig = {
    //"extends": [
    //    "stylelint-config-standard",
    //],
    "rules": {
        //"block-no-empty": true,
        "color-no-invalid-hex": true,
        //"declaration-block-no-shorthand-property-overrides": true, //出现重复属性被干掉
        //"declaration-block-no-duplicate-properties": true,//出现重复属性被干掉
        //"indentation": "tab",
        //"number-leading-zero": null,
        //"property-no-unknown": [ true, {
        //    "ignoreProperties": [
        //        "composes"
        //    ]
        //}],
        //"unit-whitelist": ["em", "rem", "s"]
        //"declaration-colon-space-after": "always",
        //"declaration-colon-space-before": "never",
        //"function-comma-space-after": "always",
        //"function-url-quotes": "double",
        //"media-feature-colon-space-after": "always",
        //"media-feature-colon-space-before": "never",
        //"media-feature-name-no-vendor-prefix": true,
        //"max-empty-lines": 5,
        //"number-leading-zero": "never",
        //"number-no-trailing-zeros": true,
        //"property-no-vendor-prefix": true,
        //"rule-no-duplicate-properties": true,
        //"declaration-block-no-single-line": true,
        //"rule-trailing-semicolon": "always",
        //"selector-list-comma-space-before": "never",
        //"selector-list-comma-newline-after": "always",
        //"selector-no-id": true,
        //"string-quotes": "double",
        //"value-no-vendor-prefix": true
    }
}

var processors = [
    stylelint(stylelintConfig),
    // Pretty reporting config
    reporter({
        clearMessages: true,
        throwError: true
    })
];


module.exports = {
    verifyFile: function (file,callback) {
        //console.log(file);

        stylelint.lint({
            code: file,
            config: stylelintConfig,
            formatter: "string",
            //files:file
        })
        .then(function(data) {
            console.log('postscss........');
            //console.log(data.results);
            //console.log(data.results[0].warnings);

            if(data.results[0].errored === true){
                var errorMes = '';
                data.results[0].warnings.forEach(function(errMessage){
                    errorMes += errMessage.text +'\\br\\'
                });

                callback({
                    status: false,
                    message:errorMes
                });
            }else{
                callback({
                    status: true
                });
            }
        })
        .catch(function(err) {
            console.log('error....')
            console.log(err)

            // do things with err e.g.
            //console.error(err.stack);

        });


        //postcss(processors).process(file).then(result => {
        //    console.log('postscss........');
        //    console.log(result);
        //
        //    callback({
        //        status: true
        //    });
        //
        //}).catch(function (error) {
        //
        //    console.log('error....')
        //    console.log(error)
        //
        //    if ( error.name === 'CssSyntaxError' ) {
        //        process.stderr.write(error.message + error.showSourceCode());
        //    } else {
        //        throw error;
        //    }
        //});


        ////警告目前暂不处理
        //return {
        //    status: true
        //};

        ////判断file是否为文件
        //try {
        //    var content = fs.readFileSync(file, 'utf8');
        //    //直接调用字符串校验的方法
        //    return this.verifyString(content);
        //} catch (e) {
        //    //文件不存在
        //    console.log('file not exist');
        //    return {
        //        status: false,
        //        message: '文件不存在'
        //    };
        //}
    },
    verifyString: function (str) {
        var vResult = csslint.verify(str);
        var messages = vResult.messages;
        //错误结果集
        var errors = [];
        var errMessage = '';
        messages.map(msg => {
            if (msg.type == 'error') {
                errors.push(msg);
            }
        });
        if (errors.length > 0) {
            //存在校验错误的情况
            errors.map(err => {
                errMessage += err.line + '行' + err.col + '列，检测到错误：' + err.message + common.getCurrentPlat().enter;
            });
            return {
                status: false,
                message: errMessage
            }
        } else {
            //警告目前暂不处理
            return {
                status: true
            };
        }
    }
};