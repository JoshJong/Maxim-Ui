var CssSliceImg = require('css-slice-imgs');
var path = require('path');
var fs = require('fs');
var async = require('async');
var Spritesmith = require('spritesmith');
var common = require('./common.js');
var os = require('os');
function Sprite(){}
Sprite.prototype = {
    _getOwner : function(){
        var host = os.hostname().toLowerCase();
        var i = host.lastIndexOf('-');
        var rtx = host.substring(0,i);
        var nowTime = new Date();
        return common.getCurrentPlat().enter + '#MAXIM{content:"' + rtx.substr(0,2) + rtx.substr(rtx.length-1,1) + nowTime.getFullYear() + (nowTime.getMonth()+1) + nowTime.getDate() + nowTime.getHours() + nowTime.getMinutes() + nowTime.getSeconds() + '"}';
    },
    sprite : function(cssFiles,config,callback){
        //判断是单个文件还是一个文件数组
        if(typeof cssFiles === 'string'){
            var tmp = cssFiles;
            cssFiles = [];
            cssFiles.push(tmp);
        }
        //获取文件个数
        var count = cssFiles.length;
        var results = [];
        var funcs = [];
        //时间戳
        var timestamp = config.spriteNameSwitch === 'true' ? '-'+config.spriteName : '';
        //加在样式文件的尾部
        var cssTail = this._getOwner();

        //多个样式文件之间是可并行的
        for(var i = 0 ; i < count ;i++){
            //将对应的样式处理函数添加到任务列表
            funcs.push(_charge(i));
        }
        //并行处理文件
        async.parallel(funcs,function(err,rets){
            //遍历结果集，组装到一个一维数组中
            for(var i = 0 ; i < rets.length ;i++){
                for(var j = 0; j < rets[i].length ; j++){
                    results.push(rets[i][j]);
                }
            }
            callback(results);
        });
        //处理样式文件数组中的第n个样式
        function _charge(n){
            return function (cb) {
                var m = n;
                //获取样式文件的结果集
                new CssSliceImg().getImages(cssFiles[m],{},function(result){
                    //保存背景图抽取后的模块执行结果
                    var r = result;
                    //这个将用来存储png合并、jpg合并、样式处理的结果
                    var ret = [];
                    //判断样式文件处理是否成功，这一步很重要，如果样式处理失败了则后面不用继续做了
                    if(r.status === false){
                        ret.push(r);
                        //直接回调
                        cb(null,ret);
                    }else {
                        //雪碧图路径生成规则：获取slice图片引用地址，提取sprite的与路径中img目录同级下
                        var destFile = r.cssFile.replace(config.localPath, config.destPath);
                        //给文件名打上时间戳
                        destFile = path.dirname(destFile) + path.sep + r.basename + timestamp + '.css';
                        //文件后缀名
                        var pngPostFix = '.png';
                        var jpgPostFix = '.jpg';
                        //png雪碧图名称
                        var pngSpriteName = r.basename + timestamp + pngPostFix;
                        //jpg雪碧图名称
                        var jpgSpriteName = r.basename + timestamp + jpgPostFix;
                        //path.sep根据系统来自动改变值为\\ 或 \/，雪碧图目录跟样式文件同级
                        var destSpritePath = path.dirname(destFile) + path.sep + 'sprite' + path.sep;
                        //目标雪碧图及样式文件的地址
                        var targetPngSprite = destSpritePath + pngSpriteName;
                        var targetJpgSprite = destSpritePath + jpgSpriteName;
                        var targetCss = destFile;
                        //样式文件进行雪碧图合并的任务流瀑布
                        async.waterfall([
                            //处理png合并的任务，并将本次处理过的css内容传递到第二个任务
                            function (callback) {
                                //去掉注释后的样式代码字符串
                                var cssContent = result.fileContent;
                                //有待合并的png图片需求
                                if (result.pngPathes.length > 1) {
                                    var r = result;
                                    //需要创建雪碧图时才创建该目录
                                    if (!fs.existsSync(destSpritePath)) {
                                        //createPath是一个同步方法
                                        common.createPath(destSpritePath, fs);
                                    }
                                    Spritesmith.run({
                                        src: r.pngPathes,
                                        //雪碧图上图片之间的间距
                                        padding: 2
                                    }, function handleResult(err, result) {
                                        if (err) {
                                            ret.push({
                                                fName: targetPngSprite.replace(config.destPath, '').replace(/\\/g, '\/'),
                                                status: false,
                                                message: err.message
                                            });
                                            //如果出错，则直接告诉下 一个任务上一环节出问题
                                            callback(null, {
                                                taskStatus: false
                                            });
                                        } else {
                                            fs.writeFile(targetPngSprite, result.image, function (err) {
                                                if (err) {
                                                    //png图片合并
                                                    ret.push({
                                                        fName: targetPngSprite.replace(config.destPath, '').replace(/\\/g, '\/'),
                                                        status: false,
                                                        message: err.message
                                                    });
                                                } else {
                                                    //png图片合并
                                                    ret.push({
                                                        fName: targetPngSprite.replace(config.destPath, '').replace(/\\/g, '\/'),
                                                        status: true
                                                    });
                                                }
                                                //在图片处理完成的情况下处理样式文件，根据图片的坐标，替换样式文件中的对应 样式
                                                cssContent = replaceCssBackground(r.fileContent, r.pngMaps, result.coordinates, pngSpriteName);
                                                callback(null, cssContent);
                                            });
                                        }
                                    });
                                } else {
                                    callback(null, cssContent);
                                }
                            },
                            //处理jpg合并的任务，并将本次处理过的css内容传递到第三个任务
                            function (css, callback) {
                                //先判断上一阶段是否出错
                                if (typeof css == 'object' && css.taskStatus === false) {
                                    callback(null, {
                                        taskStatus: false
                                    });
                                }
                                // 保存chargePngs的处理后的样式文件内容的字符串到cssContent变量中
                                var cssContent = css;
                                //有待合并的jpg图片需求
                                if (result.jpgPathes.length > 1) {
                                    var r = result;
                                    //需要创建雪碧图时才创建该目录
                                    if (!fs.existsSync(destSpritePath)) {
                                        //createPath是一个同步方法
                                        common.createPath(destSpritePath, fs);
                                    }
                                    Spritesmith.run({
                                        src: r.jpgPathes,
                                        //雪碧图上图片之间的间距
                                        padding: 2
                                    }, function handleResult(err, result) {
                                        if (err) {
                                            ret.push({
                                                fName: targetJpgSprite.replace(config.destPath, '').replace(/\\/g, '\/'),
                                                status: false,
                                                message: err.message
                                            });
                                        } else {
                                            fs.writeFile(targetJpgSprite, result.image, function (err) {
                                                if (err) {
                                                    //png图片合并
                                                    ret.push({
                                                        fName: targetJpgSprite.replace(config.destPath, '').replace(/\\/g, '\/'),
                                                        status: false,
                                                        message: err.message
                                                    });
                                                } else {
                                                    //png图片合并
                                                    ret.push({
                                                        fName: targetJpgSprite.replace(config.destPath, '').replace(/\\/g, '\/'),
                                                        status: true
                                                    });
                                                }
                                                //在图片处理完成的情况下处理样式文件，根据图片的坐标，替换样式文件中的对应 样式
                                                cssContent = replaceCssBackground(cssContent, r.jpgMaps, result.coordinates, jpgSpriteName);
                                                callback(null, cssContent);
                                            });
                                        }
                                    });
                                } else {
                                    callback(null, cssContent);
                                }
                            },
                            //接受前面传递过来的css内容，并将该内容写入到目标位置
                            function (css, callback) {
                                //先判断上一阶段是否出错
                                if (typeof css == 'object' && css.taskStatus === false) {
                                    callback(null, {
                                        taskStatus: false
                                    });
                                }
                                //需要创建雪碧图时才创建该目录
                                if (!fs.existsSync(destSpritePath)) {
                                    //createPath是一个同步方法
                                    common.createPath(destSpritePath, fs);
                                }
                                //将样式文件写到目标位置
                                fs.writeFile(targetCss, css + cssTail, function (err) {
                                    if (err) {
                                        ret.push({
                                            fName: targetCss.replace(config.destPath, '').replace(/\\/g, '\/'),
                                            status: false,
                                            message: 'css file created failed'
                                        });
                                    } else {
                                        ret.push({
                                            fName: targetCss.replace(config.destPath, '').replace(/\\/g, '\/'),
                                            status: true
                                        });
                                    }
                                    callback(null, 'done');
                                });
                            }
                        ], function (err, waterFallResult) {
                            // 返回本次任务流瀑布的结果集
                            cb(null, ret);
                            //目前只考虑一种场景的处理，如果处理了单倍图则多倍图不处理
                            return;
                        });
                    }
                    //根据坐标来处理样式文件中的背景图的background-position
                    function replaceCssBackground(cssContent,bgCsses,coordinates,fName,xx){
                        var targetCssContent = cssContent;
                        for(var p in coordinates){
                            var rp = makeBackgroundCssText(coordinates[p],fName,xx);
                            //将样式文件同样的slice图片的引用替换成相同的样式代码，也可以使用全局匹配的方法来做
                            targetCssContent = targetCssContent.split(bgCsses[p]).join(rp);
                        }
                        return targetCssContent;
                    }
                    //生成背景图标
                    function makeBackgroundCssText(coordinate,fName,xx){
                        var device = xx || 1;
                        //{ x: 0, y: 0, width: 80, height: 70 }
                        var text = 'background-position:' + -coordinate.x/device + 'px ' + -coordinate.y/device + 'px;background-image:url(sprite/'+ fName+')';
                        return text;
                    }
                });
            }
        }
    }
};
module.exports = Sprite;