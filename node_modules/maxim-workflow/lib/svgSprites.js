var SVGSpriter = require('svg-sprite'),
    path	   = require('path'),
    mkdirp	   = require('mkdirp'),
    fs		   = require('fs'),
    svg2png = require("svg2png");


function svgSprites(){}
svgSprites.prototype.init = function(files,svgSpriteDest,callback){
    var spriter	= new SVGSpriter({
        dest: svgSpriteDest || "",
        log	: false, //'info', 'verbose' or 'debug'
        shape : {
            spacing             : {                         // Spacing related options
                padding         : 0,                        // Padding around all shapes
                box             : 'box-sizing'                 // Padding strategy (similar to CSS `box-sizing`)
            },
        }
    });

    /**
     * Add a bunch of SVG files
     *
     * @param {SVGSpriter} spriter		Spriter instance
     * @param {Array} files				SVG files
     * @return {SVGSpriter}				Spriter instance
     */
    function addFixtureFiles(spriter, files) {

        files.forEach(function(file){

            spriter.add(
                path.resolve(path.join(file)),
                file,
                fs.readFileSync(path.join(file), {encoding: 'utf-8'})
            );
        })
        return spriter;
    }

    //执行
    addFixtureFiles(spriter, files).compile({
        css						: {
            //sprite				: 'svg/sprite.svg',
            layout				: 'packed',
            dimensions			: true,
            render				: {
                css				: false
            }
        }
    }, function(error, result, cssData) {
        var results = {};

        if(error){
            callback(error,results);
        }

        var ret = [];
        cssData.css.shapes.forEach(function(data,i){

            var nameArr = data.name.split('--');
            var nameArrLength = nameArr.length -1;
            var name = nameArr[nameArrLength];

            files.forEach(function(filesData){
                var basename = path.basename(filesData,'.svg');

                if(name == basename){
                    data.svgPath = filesData;
                    ret.push(data);
                }
            })

        });

        //console.log(ret);



        //输出坐标数据
        results.svgSpriteData = ret;
        results.spriteSize = cssData.css.spriteWidth + 'px ' + cssData.css.spriteHeight+'px';




        for (var type in result.css) {
            mkdirp.sync(path.dirname(svgSpriteDest));

            fs.writeFile(svgSpriteDest, result.css[type].contents,function(err){
                if (err) {
                    callback(err,results);
                }

                fs.readFile(svgSpriteDest,function(err,buf){
                    if(err){
                        callback(err,results);
                    }
                    svg2png(buf, { width: cssData.css.spriteWidth, height: cssData.css.spriteHeight})
                    .then(function(pngBuf){
                        var dirname = path.dirname(svgSpriteDest) + path.sep;
                        var basename = path.basename(svgSpriteDest,'.svg');
                        var svgSpritePngDest = dirname + basename +'-svg.png'


                        fs.writeFile(svgSpritePngDest, pngBuf,function(err){
                            if (err) {
                                callback(err,results);
                            }
                            results.svgSpriteDest = svgSpriteDest;
                            results.svgSpritePngDest = svgSpritePngDest;

                            callback(null,results);
                        })
                    })
                });
            });
        }
    })
}

module.exports = svgSprites;























